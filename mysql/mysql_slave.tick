dbrp "hostmonitor"."autogen"
var period_time = 2m
var every_time  = 1m

// slave delay
var warn_value = 1000

var mysql_data = stream
   |from()
    .measurement('mysql')
    .groupBy('dc', 'host', 'server')
   |default()
    .field('slave_last_io_error', 'ok')
    .field('slave_last_sql_error', 'ok')
    .field('slave_sql_delay', 0)
    .field('slave_slave_io_running', 1)
    .field('slave_slave_sql_running', 1)
   |window()
    .period(period_time)
    .every(every_time)
    .align()
   |alert()
      .id('{{ .TaskName }}-mysql slave')
      .details('''
Time: {{ .Time.Local.Format "2006-01-02T15:04:05Z07:00" }}<br>Host: {{ index .Tags "host" }}<br>Id: {{ .ID }}<br>Duration: {{ .Duration }}<br>Message: {{ .Message }}
''')
      .message('{{ .Level}}: {{ index .Tags "dc" }}/{{ index .Tags "host" }}/{{ index .Tags "server" }}/mysql-slave - io_run: {{ index .Fields "slave_slave_io_running" }}, sql_run: {{ index .Fields "slave_slave_sql_running" }}, delay: {{ index .Fields "slave_sql_delay" }}, last_io_error: {{ index .Fields "slave_last_io_error" }}, last_sql_error: {{ index .Fields "slave_last_sql_error" }}')
      .warn(lambda: "slave_slave_io_running" == 1 AND "slave_slave_sql_running" == 1 AND "slave_sql_delay" > warn_value)
      .crit(lambda: "slave_slave_io_running" == 0 OR "slave_slave_io_running" == 0) 
      .log('/tmp/mysql_slave.log')

      .email()
        .to('email-address')
